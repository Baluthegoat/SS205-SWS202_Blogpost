---
import type { ColorTheme } from '@/types'

interface Props {
  theme: ColorTheme
}

const { theme } = Astro.props

const themeName = theme.replace('theme-', '')
---

<div title={`Preview ${theme}`} class="color-theme-select">
  <div class={theme} data-mode="light">
    <div>{themeName}</div>
  </div>
  <div class={theme} data-mode="dark">
    <div>{themeName}</div>
  </div>
</div>
<style is:global>
  .color-theme-select {
    @apply w-28 cursor-pointer overflow-clip rounded-md border border-accent/25;

    & > * {
      @apply h-14 cursor-pointer px-4 py-1;
      color: rgb(var(--accent)) !important;
      background-color: rgb(var(--accent-bg)) !important;
      & > * {
        @apply flex h-full cursor-pointer items-center justify-center;
      }
    }
  }
</style>
<script>
  function setUpColorThemeSwitches(container: Document) {
    container.querySelectorAll('.color-theme-select').forEach((span) => {
      span.addEventListener('click', async () => {
        const rootNode = container.children[0]

        const classesWithoutThemes = rootNode.className
          .split(' ')
          .filter((c) => c && !c.startsWith('theme-'))

        const newTheme = (span as HTMLElement).title || ''

        rootNode.className = [newTheme, ...classesWithoutThemes].join(' ')
      })
    })
  }

  document.addEventListener('astro:page-load', () => {
    setUpColorThemeSwitches(document)
  })
</script>
