---
import type { ColorScheme } from '@/types'

interface Props {
  scheme: ColorScheme
}

const { scheme } = Astro.props

const schemeName = scheme.replace('scheme-', '')
---

<div title={`Preview ${scheme}`} class="color-scheme-select">
  <div class={scheme} data-mode="light">
    <div>{schemeName}</div>
  </div>
  <div class={scheme} data-mode="dark">
    <div>{schemeName}</div>
  </div>
</div>
<style is:global>
  .color-scheme-select {
    @apply w-28 cursor-pointer overflow-clip rounded-md border border-accent/25;

    & > * {
      @apply h-14 cursor-pointer px-4 py-1;
      color: rgb(var(--accent)) !important;
      background-color: rgb(var(--accent-bg)) !important;
      & > * {
        @apply flex h-full cursor-pointer items-center justify-center;
      }
    }
  }
</style>
<script>
  function setUpColorSchemeSwitches(container: Document) {
    container.querySelectorAll('.color-scheme-select').forEach((span) => {
      span.addEventListener('click', async () => {
        const rootNode = container.children[0]

        const classesWithoutSchemes = rootNode.className
          .split(' ')
          .filter((c) => c && !c.startsWith('scheme-'))

        const newScheme = (span as HTMLElement).title || ''

        rootNode.className = [newScheme, ...classesWithoutSchemes].join(' ')
      })
    })
  }

  document.addEventListener('astro:page-load', () => {
    setUpColorSchemeSwitches(document)
  })
</script>
